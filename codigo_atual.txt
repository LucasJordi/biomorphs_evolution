import pandas as pd
import numpy as np
import csv
import networkx as nx
import matplotlib.pyplot as plt
import os


# Função para converter um número de regra em uma tabela de transição
def rule_to_transition_table(rule_number):
    rule_bin = np.array([int(x) for x in np.binary_repr(rule_number, width=8)], dtype=int)
    return rule_bin

# Função para aplicar a regra do autômato celular 1D com condições de contorno periódicas
def apply_rule_1d(state, transition_table):
    new_state = np.zeros_like(state)
    for i in range(len(state)):
        left = state[(i-1) % len(state)]
        center = state[i]
        right = state[(i+1) % len(state)]
        neighborhood = left << 2 | center << 1 | right
        new_state[i] = transition_table[7 - neighborhood]
    return new_state

# Função para gerar biomorfos 1D com uma regra específica
def generate_biomorphs_1d(generations, seed, rule_number):
    transition_table = rule_to_transition_table(rule_number)
    states = np.zeros((generations, len(seed)), dtype=int)
    states[0] = seed
    for i in range(1, generations):
        states[i] = apply_rule_1d(states[i-1], transition_table)
    return states

# Função para centralizar uma matriz pequena dentro de uma matriz maior
def centralize_seed_in_matrix(seed, size):
    matrix = np.zeros((size, size), dtype=int)
    start_row = (size - seed.shape[0]) // 2
    start_col = (size - seed.shape[1]) // 2
    matrix[start_row:start_row + seed.shape[0], start_col:start_col + seed.shape[1]] = seed
    return matrix

# Função para interpretar a regra 2D no formato B/S
def parse_life_rules(rule_strings):
    rules = []
    for rule_string in rule_strings:
        birth_conditions, survival_conditions = rule_string.split('/')
        birth_conditions = [int(x) for x in birth_conditions[1:]]  # Ignorar o "B"
        survival_conditions = [int(x) for x in survival_conditions[1:]]  # Ignorar o "S"]

        def life_rule_2d(state):
            new_state = np.copy(state)
            for i in range(state.shape[0]):
                for j in range(state.shape[1]):
                    total = np.sum(state[max(0, i-1):min(i+2, state.shape[0]), max(0, j-1):min(j+2, state.shape[1])]) - state[i, j]
                    if state[i, j] == 1:
                        if total not in survival_conditions:
                            new_state[i, j] = 0
                    else:
                        if total in birth_conditions:
                            new_state[i, j] = 1
            return new_state

        rules.append(life_rule_2d)
    return rules

# Função para exibir a árvore evolutiva
def plot_evolution_tree(tree_data, biomorphs, filename):
    def array_to_image(array):
        fig, ax = plt.subplots()
        ax.imshow(array, cmap='binary')
        ax.axis('off')
        fig.canvas.draw()

        # Convert figure to numpy array
        image = np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8')
        image = image.reshape(fig.canvas.get_width_height()[::-1] + (3,))
        plt.close(fig)
        return image

    G = nx.DiGraph()
    pos = {}
    labels = {}

    # Converter arrays NumPy em imagens e armazenar posições para layout
    for i, (parent, children, rule) in enumerate(tree_data):
        parent_img = array_to_image(parent)
        parent_pos = (i, 0)
        G.add_node(i, image=parent_img, pos=parent_pos)
        pos[i] = parent_pos

        for j, child in enumerate(children):
            child_img = array_to_image(child)
            child_pos = (i + j + 1, -(j + 1))
            G.add_node(i + len(children) + j, image=child_img, pos=child_pos)
            G.add_edge(i, i + len(children) + j, label=f"Iter {i+1} - Regra {j+1}")
            pos[i + len(children) + j] = child_pos

    fig, ax = plt.subplots(figsize=(12, 8))
    nx.draw(G, pos=pos, with_labels=False, node_size=5000, ax=ax)

    # Adicionar as imagens aos nós
    for n in G.nodes(data=True):
        img = n[1]['image']
        imagebox = OffsetImage(img, zoom=0.1)
        ab = AnnotationBbox(imagebox, pos[n[0]], frameon=False, pad=0.3)
        ax.add_artist(ab)

    # Adicionar rótulos nas arestas25
    edge_labels = nx.get_edge_attributes(G, 'label')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, ax=ax)

    plt.title("Árvore Evolutiva dos Biomorfos")
    plt.savefig(filename)
    plt.show()


# Função para ler as regras do arquivo CSV
def load_rules_from_csv(csv_filename):
    df = pd.read_csv(csv_filename)
    return df

# Função para exibir as regras e permitir que o usuário selecione 5
def select_rules(df):
    print("Regras disponíveis:")
    print(df.to_string(index=False))
    selected_rules = []
    for i in range(5):
        rule_idx = int(input(f"Selecione o índice da regra {i+1}: "))
        selected_rules.append(df.iloc[rule_idx])
    return selected_rules


# Função para interpretar a regra 2D no formato B/S
def parse_life_rule(rule_string):
    birth_conditions, survival_conditions = rule_string.split('/')
    birth_conditions = [int(x) for x in birth_conditions[1:]]  # Ignorar o "B"
    survival_conditions = [int(x) for x in survival_conditions[1:]]  # Ignorar o "S"

    def life_rule_2d(state):
        new_state = np.copy(state)
        for i in range(state.shape[0]):
            for j in range(state.shape[1]):
                total = np.sum(state[max(0, i-1):min(i+2, state.shape[0]), max(0, j-1):min(j+2, state.shape[1])]) - state[i, j]
                if state[i, j] == 1:
                    if total not in survival_conditions:
                        new_state[i, j] = 0
                else:
                    if total in birth_conditions:
                        new_state[i, j] = 1
        return new_state

    return life_rule_2d

def fractal_dimension(Z):
    # Função auxiliar para contar caixas com tamanho k
    def boxcount(Z, k):
        # Dividir a matriz Z em blocos de tamanho k x k e contar os blocos que contêm pelo menos um pixel
        S = np.add.reduceat(np.add.reduceat(Z, np.arange(0, Z.shape[0], k), axis=0),
                            np.arange(0, Z.shape[1], k), axis=1)
        # Contar os blocos não vazios
        return len(np.where((S > 0) & (S < k * k))[0])

    # Transformar Z em uma matriz binária
    Z = (Z < Z.mean())

    # Dimensões da matriz Z
    p = min(Z.shape)

    # Calcular o número máximo de tamanhos de caixas que podem ser usados
    n = int(np.floor(np.log2(p)))
    sizes = 2**np.arange(n, 1, -1)

    # Contar o número de caixas para cada tamanho
    counts = [boxcount(Z, size) for size in sizes]

    # Ajustar uma linha aos dados log-log
    coeffs = np.polyfit(np.log(sizes), np.log(counts), 1)

    # Retornar a dimensão fractal
    return -coeffs[0]

def extrair_centro(matriz, tamanho_novo):
    # Obter as dimensões da matriz original
    linhas, colunas = matriz.shape

    # Calcular os índices de início para as linhas e colunas centrais
    inicio_linhas = (linhas - tamanho_novo) // 2
    inicio_colunas = (colunas - tamanho_novo) // 2

    # Extrair a parte central da matriz
    matriz_central = matriz[inicio_linhas:inicio_linhas + tamanho_novo,
                            inicio_colunas:inicio_colunas + tamanho_novo]

    return matriz_central

def acrescentar_zeros(array, num_zeros):
    # Criar um array de zeros para o início e o fim
    zeros_inicio = np.zeros(num_zeros)
    zeros_fim = np.zeros(num_zeros)

    # Concatenar os zeros com o array original
    novo_array = np.concatenate((zeros_inicio, array, zeros_fim))

    return novo_array
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Função para gerar biomorfos 2D
def generate_biomorphs_2d_until_convergence(seed, rule_func, rule_name, initial_state_name):
    """
    Generates 2D biomorphs using a given Life-like rule and iterates until convergence.
    
    Convergence is defined as either reaching a stable state or cycling between two states.

    Parameters:
    - seed: 2D numpy array representing the initial state.
    - rule_func: function to apply the 2D cellular automaton rule.
    - rule_name: string representing the rule (e.g., 'B3/S23').
    - initial_state_name: string representing the initial state and rule seed name.

    Returns:
    - final_state: the final stabilized 2D array after evolution.
    - characteristics_df: DataFrame containing the properties of each iteration.
    """
    current_state = seed
    previous_state = None
    prev_previous_state = None
    iteration = 0
    characteristics = []
    output_dir="biomorphs"
    while True:
        iteration += 1
        prev_previous_state = previous_state
        previous_state = current_state
        current_state = rule_func(current_state)
        os.makedirs(output_dir, exist_ok=True)
        # Substituir barras no nome do arquivo
        rule_name_safe = rule_name.replace('/', '-')
        initial_state_name_safe = initial_state_name.replace('/', '-')

        # Save the image of the current state
        filename = f'{initial_state_name_safe}-{rule_name_safe}-Iteracao{iteration}.png'
        filepath = os.path.join(output_dir, filename)
        plt.figure(figsize=(6, 6))
        plt.imshow(current_state, cmap='binary')
        plt.title(f'{initial_state_name_safe}-{rule_name_safe} Iteração {iteration}')
        plt.savefig(filepath)
        plt.show()  # Exibir a imagem gerada
        plt.close()

        # Calculate characteristics
        fractal_dim = fractal_dimension(current_state)
        num_cells = np.sum(current_state)
        mean_value = np.mean(current_state)
        std_value = np.std(current_state)
        symmetry_vertical = np.sum(current_state == np.flipud(current_state)) / current_state.size
        symmetry_horizontal = np.sum(current_state == np.fliplr(current_state)) / current_state.size

        characteristics.append([
            f'{initial_state_name}-{rule_name}', 
            rule_name, 
            iteration, 
            fractal_dim, 
            num_cells, 
            mean_value, 
            std_value, 
            symmetry_vertical, 
            symmetry_horizontal, 
            'Não', 
            ''
        ])

        # Check for convergence
        if np.array_equal(current_state, previous_state):
            print("Converged to a stable state.")
            break
        elif np.array_equal(current_state, prev_previous_state):
            print("Detected oscillation between two states.")
            break

    # Create DataFrame for characteristics
    columns = [
        'Semente', 'Regra', 'Iteração', 'Dimensão Fractal', 'Número de Células', 
        'Valor Médio', 'Desvio Padrão', 'Simetria Vertical', 'Simetria Horizontal', 
        'É Animal?', 'Nome do Animal'
    ]
    characteristics_df = pd.DataFrame(characteristics, columns=columns)

    # Ask user to identify iterations that look like animals
    animal_iterations = input("Informe os índices das iterações que se parecem com animais (separados por vírgulas): ")
    if animal_iterations:
        animal_indices = [int(idx.strip()) for idx in animal_iterations.split(',')]
        for idx in animal_indices:
            animal_name = input(f"Qual o nome do animal para a iteração {idx}? ")
            characteristics_df.at[idx-1, 'É Animal?'] = 'Sim'
            characteristics_df.at[idx-1, 'Nome do Animal'] = animal_name

    return current_state, characteristics_df

def main():
    # Configurações iniciais
    sementinha = [int(x) for x in input("Digite o estado inicial (ex: 00110): ")] 
    rule_number = int(input("Digite o número da regra 1D (0 a 255): "))  # usar 150 e 90
    #incluir 3 zeros antes e depois, para maquina nao truncar nas laterais
    initial_state = acrescentar_zeros(sementinha, 3) 
    generations = 7
    # Gerar biomorfo 1D com a regra escolhida
    biomorph_1d = generate_biomorphs_1d(generations, np.array(initial_state), rule_number)
    biomorph7x7 = extrair_centro(biomorph_1d,generations)
    #matrix_size = int(input("Digite o tamanho da matriz para atuação da regra 2D (ex: 30): "))
    matrix_size = 30
    matrix_2d = centralize_seed_in_matrix(biomorph7x7, matrix_size)
    plt.figure(figsize=(6, 6))
    plt.imshow(matrix_2d, cmap='binary')
    plt.title(f'Semente {generations}x{generations} gerada com a Regra {rule_number}')
    plt.show()
    # Leitura das regras do arquivo CSV
    rules_df = pd.read_csv('life_rules.csv')
    print("Grupos de regras para serem escolhidas:")
    print(rules_df)
    rule_idx = int(input(f"Escolha a regra pelo indice da tabela acima: "))
    selected_rule = rules_df.iloc[rule_idx]['Regra']  # Obter a string da regra

    # Gerar regras 2D a partir da seleção
    rule = parse_life_rule(selected_rule)

    # Evolução dos biomorfos 2D
    final_biomorph, characteristics_df = generate_biomorphs_2d_until_convergence(matrix_2d, rule, "B3/S23", "Semente1-Regra1")

    # Salvar características em arquivo Excel
    characteristics_df.to_excel("biomorph_characteristics.xlsx", index=False)
        
# Chamar a função principal
if __name__ == "__main__":
    main()